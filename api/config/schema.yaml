author:  Maxim Yalagin <yalagin@gmail.com>
id:
    generationStrategy: uuid
    writable: true
rdfa:
    #-  uri: "https://schema.org/docs/schema_org_rdfa.html" # Current version of Schema.org
    #    format: rdfa
    #-   uri: "https://raw.githubusercontent.com/schemaorg/schemaorg/master/data/ext/auto/auto.rdfa" # Experimental version of Schema.org extension: AUTO
    #    format: rdfa
    -   uri: "https://raw.githubusercontent.com/schemaorg/schemaorg/master/data/releases/3.7/all-layers.rdf" # Current version of Schema.org + all extensions
        format: rdf
    -   uri: "https://raw.githubusercontent.com/schemaorg/schemaorg/master/data/schema.rdfa" # Experimental version of Schema.org
        format: rdfa
types:
#    Rating:
#        properties:
#            author: { range: "Person" }
#            ratingValue: {range: "Integer"}
#    Review:
#        parent: AbstractDate
#        properties:
#            author: { range: "Person" }
#            itemReviewed: { range: "Person" }
#            name: ~
#            reviewBody: ~
#            reviewRating: { range: "Rating" }
#            publisher: { range: "Person" } #"@type": "Organization", "name": "Washington Times"


#    ExerciseAction:  # described in past tense
#        parent: AbstractDate
#        properties:
#            exercisePlan:  
#                range: "ExercisePlan"
#            exerciseType: {range: "Text"} # reserved for name 
#            actionStatus: 
#                range: "ActionStatusType"
#            agent:
#                range: "Person" 
#            endTime: ~
#            startTime: ~
#            error: {range: "Thing"} # failed 
#            instrument: {range: "Thing"} #equipment
##            object: {range: "Thing"} # part of body 
#            result: {range: "Thing"} #how many reps
##            target: {range: "EntryPoint ", ormColumn: {options={"comment" = "how many reps"}}}
#    ExercisePlan:  #ecxercices
#        parent: AbstractDate
#        properties:
#            activityDuration: {range: "QuantitativeValue"} 
#            activityFrequency: {range: "QuantitativeValue"}  # days
#            additionalVariable: {range: "Text"}              # Any additional component of the exercise prescription that may need to be articulated to the patient 
#            intensity: {range: "QuantitativeValue"}          # heart beats 
#            repetitions: {range: "Integer"}                      
#            restPeriods: {range: "QuantitativeValue"}      #  secounds between 
#            workload: {range: "QuantitativeValue"}         # calories 
#            #there also have CreativeWork for owner who created that exercise 
#            associatedAnatomy: {range: "AnatomicalStructure"}   #what part of body is working now  many to many with degree of working ?
#            category: 
#                range: "PhysicalActivityCategory" # enum

#    ExerciseFromAdmin:
#        parent: AbstractThing
#        properties:
#            owned: {range: "Person"}
#            associatedAnatomy: {range: "AnatomicalStructure"}   #what part of body 
#            targetedMuscleGroup:  {range: "TargetedMuscleGroup"}
#            otherMuscleGroups:  {range: "TargetedMuscleGroup" , cardinality: "(0..*)"}
#            typeOfDevelopment:  {range: "TypeOfDevelopment" }
#            mechanics: {range: "TypeOfDevelopment" }
#            equipment: {range: "Equipment" , cardinality: "(0..*)"}
#            difficulty: {range: "Difficulty" }
#            isPublic: {range: "Boolean"}

#    Difficulty:
#        parent: AbstractThing
#        properties:
#            name: ~
#    AnatomicalStructure:        #muscules 
#        parent: AbstractThing
#        properties:
#            bodyLocation: {range: "Text"} #todo in future make  targetedMuscleGroup
#    PhysicalActivityCategory:
#        properties:
#            name: {range: "Text"}
#    AbstractDate:
#        abstract: true
#        properties:
#            createdAt: { range: "DateTime"}
#            updatedAt: { range: "DateTime"}
#    AbstractThing:
#        parent: AbstractDate
#        properties:
#            name: ~
#            description: ~
#            image: { range: "MediaObject" }
#   MediaObject:
#        parent: AbstractDate
#        properties:
#            author: { range: "Person"}
#            contentUrl: { range: "URL"}
#            datePublished: ~
#            description: ~
#            name: ~        
#    Thing:
#        parent: AbstractDate
#        properties:
#            name: ~
#            image: { range: "MediaObject" }
#            description: ~
#    AbstractHasUser:
#        parent: AbstractThing
##        implements: HasUser
#        properties: 
#            user: { range: "User" }


    QuantitativeValue:
        parent: AbstractDate
        properties:
            value: { range: "Number" }
            unitCode: { range: "Text"}


    ActionStatusType:
        properties:
            name: {range: "Text"}
        
    Person:
        parent: AbstractDate
        properties:
            familyName: ~
            givenName: ~
            birthDate: ~
            follows:  { range: "Person" }
            gender: ~
            knowsLanguage:
                range: "Text"
            nationality: { range: "Text" }
            weight: { range: "QuantitativeValue" }
            height: { range: "QuantitativeValue" }
            unitsOfMeasurement: { range: "Boolean" } #true for metric (kg/m) false for imperial (lbs / ft)
            plans:
                range: "Plan"
                cardinality: "(0..*)"
                mappedBy: owned
        #todo add measurements and progression for that             
            
    Plan:
        parent: AbstractHasUser
        properties:
#            owned: {range: "Person", cardinality: "(*..1)", inversedBy: "plans"  }
            workouts:  { range: "Workouts", cardinality: "(0..*)", mappedBy: "plan" }
#            category:
#                range: "PhysicalActivityCategory" # enum
#            difficulty: { range: "Difficulty", nullable: true}
            isCurrent: {range: "Boolean" }
        
    Workouts:
        parent: AbstractHasUser
        properties:
            plan:
                range: "Plan"
                cardinality: "(*..1)"
                inversedBy: "workouts"
            dayNumber:
                range: "DayOfWeek" 
            exerciseWorkout:
                range: "ExerciseWorkout"
                cardinality: "(1..*)"
                mappedBy: "workouts"
    DayOfWeek:
        properties: {}
                
    ExerciseWorkout:
        parent: AbstractDate
        properties:
            order: { range: "Integer" }                   #todo count how many exercise for day +1
            workouts:
                range: "Workouts"
                cardinality: "(*..1)"
                inversedBy: "exerciseWorkout"
            exercise:
                range: "Exercise"
                cardinality: "(*..1)"
            AfterExerciseRestPeriod:
                range: "Integer"
            baseReps: { range: "Integer" }
            baseSets: { range: "Integer" }
            baseWeight: { range: "QuantitativeValue" }
            baseRange: { range: "QuantitativeValue" }
            baseTime: { range: "Integer" }
            

    Exercise:
        parent: AbstractHasUser
        properties:
            language: {range: "Text"}
            betweenSetsRestPeriod: { range: "Integer" }
            afterExerciseRestPeriod: { range: "Integer" }
            typeOfExercise: { range: "Text" } #todo enum
            musculeTypees: { range: "Text" } #todo enum
    ExerciseLogs:
        properties:
            user: {range: "Person" ,cardinality: "(*..1)"} #todo user
            exercise:
                range: "Exercise"
                cardinality: "(*..1)"
            baseReps: { range: "Integer" }
            baseSet: { range: "Integer" }
            baseWeight: { range: "QuantitativeValue" }
            baseRange: { range: "QuantitativeValue" }
            baseTime: { range: "Integer" }
            
