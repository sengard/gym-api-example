author:  Maxim Yalagin <yalagin@gmail.com>
id:
    generationStrategy: uuid
    writable: true
rdfa:
    #-  uri: "https://schema.org/docs/schema_org_rdfa.html" # Current version of Schema.org
    #    format: rdfa
    #-   uri: "https://raw.githubusercontent.com/schemaorg/schemaorg/master/data/ext/auto/auto.rdfa" # Experimental version of Schema.org extension: AUTO
    #    format: rdfa
    -   uri: "https://raw.githubusercontent.com/schemaorg/schemaorg/master/data/releases/3.7/all-layers.rdf" # Current version of Schema.org + all extensions
        format: rdf
    -   uri: "https://raw.githubusercontent.com/schemaorg/schemaorg/master/data/schema.rdfa" # Experimental version of Schema.org
        format: rdfa
types:
    Thing:
        properties:
            name: ~
            image: ~
            description: ~
    AbstractThing:
        properties:
            name: ~
            image: ~
            description: ~
    Person:
        properties:
            familyName: ~
            givenName: ~
            additionalName: ~
            address: { range: "PostalAddress" }
            birthDate: ~
            follows:  { range: "Person" }
            knows:  { range: "Person" }
            gender: ~
            height: { range: "QuantitativeValue" }
            knowsLanguage: 
                range: "Language"
            nationality: { range: "Country" }
            weight: { range: "QuantitativeValue" }
    PostalAddress:
        properties:
            addressCountry: { range: "Country" }
            addressLocality: ~
            addressRegion: ~
            postOfficeBoxNumber: ~
            postalCode: ~
            streetAddress: ~
    QuantitativeValue:
        properties:
            value: { range: "Number" }
            unitCode: { range: "Text"}
    Place:
        properties:
            address: { range: "PostalAddress" }
    Country:
        properties:
            name: ~
    Language:
        properties:
            name: ~
            alpha2:
                range: "Text"
                ormColumn: "length=2"
            alpha3: 
                range: "Text"
                ormColumn: "length=3"
    AggregateRating:
        properties:
            itemReviewed:
                range: "Thing"
            ratingCount:
                range: "Number"
            reviewCount:
                range: "Number"
            ratingValue:
                range: "Number"
    Rating:
        properties:
            author: { range: "Person" }
            ratingValue: {range: "Number"}
    Review:
        properties:
            author: { range: "Person" }
            itemReviewed: { range: "Person" }
            name: ~
            reviewBody: ~
            reviewRating: { range: "Rating" }
            publisher: { range: "Person" } #"@type": "Organization", "name": "Washington Times"
    ExerciseAction:  # described in past tens
        properties:
            exercisePlan:  
                range: "ExercisePlan"
            exerciseType: {range: "Text"} # reserved for name 
            actionStatus: 
                range: "ActionStatusType"
            agent:
                range: "Person" 
            endTime: ~
            startTime: ~
            error: {range: "Thing"} # failed 
            instrument: {range: "Thing"} #equipment
            object: {range: "Thing"} # part of body 
            result: {range: "Thing"} #how many reps
#            target: {range: "EntryPoint ", ormColumn: {options={"comment" = "how many reps"}}}
    ExercisePlan:  #ecxercices
        properties:
            activityDuration: {range: "QuantitativeValue"} #  {range: "Text"}
            activityFrequency: {range: "QuantitativeValue"} # {range: "Text"} How often 
            additionalVariable: {range: "Text"}
            exerciseType: {range: "Text"}
            intensity: {range: "QuantitativeValue"} # heart beats 
            repetitions: {range: "Number"}
            restPeriods: {range: "QuantitativeValue"} # QualitativeValue  or Text 
            workload: {range: "QuantitativeValue"} # calories 
            #there also have CreativeWork for owner who created that exercise 
            associatedAnatomy: {range: "AnatomicalStructure"}
            category: 
                range: "PhysicalActivityCategory" # enum
    ActionStatusType:
        properties:
            supersededBy: {range: "ExerciseAction"}
    PhysicalActivityCategory:
#        vocabularyNamespace: 'http://health-lifesci.schema.org/'
        properties:
            supersededBy: {range: "ExercisePlan"}
    AnatomicalStructure:
        parent: AbstractThing
        properties:
            ExercisePlans: {range: "ExercisePlan", cardinality: "(*..*)"}
        
            
                
